#! /usr/bin/env python3
import os, sys, urllib.request, json, glob, shutil

#####
#
# This script updates the container configs with new verions
#
#####

#####
# Configuration
#####
limit = 10



# Change to script dir
abspath = os.path.abspath(__file__)
dname = os.path.dirname(abspath)
os.chdir(dname)

# Change to root of repo
os.chdir('..')

# Store repo dir
repodir = os.getcwd()


#####
#  Parse User and Pass from cli
#####
token = ''
if len(sys.argv) > 1:
    if sys.argv[1] == 'help':
        print("You may pass in a Github token inprove API access, ie `"+sys.argv[0]+" token`")
        sys.exit()

    if sys.argv[1]:
        token = sys.argv[1]

print("\n")
print('#####')
print('# Get Vanilla Versions')
print('#####')

# Config
template_folder = repodir+'/template/vanilla'
version_folder = repodir+'/containers/vanilla'
version_list = []

# Get vanilla versions
with open(repodir+'/template/vanilla-versions') as fin:
    for line in fin:
        if len(line.strip()) > 0:
            version_list.append(line.strip())
version_list.sort(reverse=True)

# Delete existing version folders
print('Deleting versions from: '+version_folder)
paths = glob.glob(version_folder+'/*/')
for path in paths:
    shutil.rmtree(path, False)

# Create new version folders
print('Creating new versions for: '+version_folder)
for version in version_list:
    print(version)

    # Setup
    vfolder = version_folder+'/'+version
    vnumber = version.replace('.', '')

    # Copy template to new folder
    shutil.copytree(template_folder, vfolder)

    # Filter replace codes
    with open(vfolder+'/Dockerfile.template', 'r') as f:
        file_contents = f.read()

    file_contents = file_contents.replace('%%VERSION%%', vnumber)

    with open(vfolder+'/Dockerfile','w') as f:
        f.write(file_contents)

    # Delete dockerfile.template
    os.remove(vfolder+'/Dockerfile.template')

# Update latest file
with open(version_folder+'/latest','w') as f:
    latest = version_list[0]
    print("Updating latest to: "+latest)
    f.write(latest)
